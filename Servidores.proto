syntax = "proto3";

package fulcrum;

option go_package = "./";

// Mensajes específicos para el servicio Fulcrum
message CommandRequest {
  string action = 1;
  string sector = 2;
  string base = 3;
  string newBase = 4;  // Solo usado para RenombrarBase
  int32 value = 5;     // Solo usado para AgregarBase y ActualizarValor
}

message CommandResponse {
  repeated int32 vectorClock = 1;
}

message Propagation {
  string sector = 1;
  map<string, int32> state = 2;
  repeated int32 vectorClock = 3;
}

message PropagationResponse {
  bool success = 1;
  string message = 2;
}

// Definición de Message y Acknowledgement (simulados)
message Message {
  string message_content = 1;
}

message Acknowledgement {
  bool acknowledged = 1;
}

// Definiciones directamente incluidas del servicio Fulcrum
service Fulcrum {
  rpc ApplyCommand(CommandRequest) returns (CommandResponse) {}
  rpc ProcessVanguardMessage(Message) returns (Acknowledgement) {}
  rpc ApplyPropagation(Propagation) returns (PropagationResponse) {}
}

// Definiciones directamente incluidas del servicio Broker
service Broker {
  rpc RedirectEngineer(EngineerRequest) returns (FulcrumAddress) {}
  rpc RedirectCommander(CommanderRequest) returns (FulcrumAddress) {}
  rpc ResolveConflict(ConflictRequest) returns (FulcrumAddress) {}
}

message EngineerRequest {
  string command = 1;
}

message CommanderRequest {
  string command = 1;
}

message ConflictRequest {
  string sector = 1;
  string base = 2;
  repeated int32 vectorClock = 3;
}

message FulcrumAddress {
  string address = 1;
}






